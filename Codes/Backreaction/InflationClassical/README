There are two types of files for coding here:

1. Mathematica files *.m
2. Fortran files *.f90

In additions there are two *.dat files for initial data 

1. initialdata.dat: has the initial data for the modes computed by Mathematica
file at the time 'tini', which is much after the bounce in the classical
regime.
2. input.dat: has the initial data for the background evolution in the very
first iteration.

Job of mathematica files:
------------------------
The mathematica file 'mathinitial.m' specifies the intiial condition at the
bounce and 'geninitial.m' evolve the background both forward and backwards in
tim across the quantum bounce. The idea is that in this evolution we can also
give the initial data for the perturbations in the quantum gravity regime and
evolve it forward in time.

Now, at a time much after the bounce---usually taken to be t=30000 t_pl---we
read the conditions for both the background quantities (printed in input.dat)
and perturbations (printed in initialdata.dat). The intiaildata.dat will be
useful only when we want to give the state coming from LQC as the initial data
for the classical evolution. In the current version of the code, we are not
doing that. We are giving an artificial ecited state either a Gaussian or
exponential Beta coefficients, which can be generated inside the Fortran code. 

Job of the Fortran code:
-----------------------

We utilize the modular programing feature of Fortran. Similar types of
subroutines are defined in a a module which is then used in the main code which
contains the driver (technically referred to as the 'program'). Each of these
modules have been defined in separate .f90 files. We will describe each of them
separately here:

a) kinds.f90: In module 'kinds', this file contains the definitions of 'sp'
(single precision), 'dp' (double precision), 'qp' (quad precision). But, we wil
be working with double precision all the time. So, we have defined 'wp' (working
precision) to be 'dp'.

b) vars.f90: In module 'vars', this file contains the definition of the global
variables to be used at various places in the code. Whenever the module 'vars'
is called these vriables will be used as they are defined here. The arrays are
declared as allocatable which are then given required size allocation in the
main code. There are parameters defined for convenience These parameters are
constants and their values can not be changed wnywhere else in the code. For
example, if one ries to redefine kconst as something else, the code wil generate
errors. This means that these parameters are "use only" for the rest of the
code. 

 At the end of the module, there is list of variables in a line starting with
'namelist'. This is a way of declaring that the values of these parameters are
to be provided by the user. These namelist variables are initialized in the
input.dat file which is read by the subroutine readparams() in main.f90. Instead
of providing the initial values of the namelist variables by hand, we create
this file at the end of the mathematica file 'geninitial.m'.

c) rhs.f90: This file defines the module rhs which contains various subroutines
and functions that are needed to define the equations of motion for the
background and perturbations. For example, declaring potentials, derivatives of
potential, equations for motion, counter terms for the energy density and
pressure of the quantum perturbations. 

d) rk4.f90:  As the name suggests this file defines the Runge-Kutta subroutines
to be used in integrating the equations of motion for the background and
perturbations. The subroutines are packaged in the module named 'rk'. At the
moment there are two rk4 subroutines: rk4() [fixed step size] and odeint()
[adaptive step size based on rk4 and rk5 method. This is directly copied from
the Numerical Recipe in Fortran]. The fixed step size subroutine just there for
testing and was initially used in simple situations. But, in the main code we
use the adaptive step size which is quite crucial when the perturbation energy
density is large enough.



